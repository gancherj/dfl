use std::str::FromStr;
use std::rc::Rc;

use crate::ast::*;
use crate::span::*;

grammar;

match {
    r"\s*" => {}, // The default whitespace skipping is disabled if an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => {}, // Skip `// comments`
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},  // Skip `/* comments */`
    _
}

CommaSep<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

Bool: bool = { "false" => false, "true" => true }
PositiveInt: u32 = {
    r"[1-9][0-9]*" => u32::from_str(<>).unwrap(),
}
UnsignedInt: u32 = {
    PositiveInt,
    "0" => 0,
}
Int: i64 = {
    UnsignedInt => <>.into(),
    "-?[1-9][0-9]*" => i64::from_str(<>).unwrap(),
}
Var: Var = { r"[a-zA-Z_][a-zA-Z0-9_']*" => <>.into() }
Const: Const = { r"[a-zA-Z_][a-zA-Z0-9_']*" => <>.into() }
ChanName: ChanName = { r"[a-zA-Z_][a-zA-Z0-9_']*" => <>.into() }
ProcName: ProcName = { r"[a-zA-Z_][a-zA-Z0-9_']*"  => <>.into() }
MutName: MutName = { r"[a-zA-Z_][a-zA-Z0-9_']*" => <>.into() }
PermVar: PermVar = { r"[a-zA-Z_][a-zA-Z0-9_']*" => <>.into() }

BaseType: BaseType = {
    "bool" => BaseType::Bool,
    "int" => BaseType::Int,
}

BaseTypeWithRef: BaseType = {
    BaseType,
    "&" <n:MutName> <l:("[""*""]")*> => BaseType::Ref(Rc::new([n]), l.len()),
    "&" "{" <ns:CommaSep<MutName>> "}" <l:("[""*""]")*> => BaseType::Ref(ns.into(), l.len()),
}

MutType: MutType = {
    <t:BaseType> => Rc::new(MutTypeX::Base(t)),
    "[" <t:MutType> "]" => Rc::new(MutTypeX::Array(t)),
}

ProcParam: ProcParam = {
    "(" <v:Var> ":" <t:BaseTypeWithRef> ")" => ProcParam { name: v, typ: t },
}

PermFraction: PermFraction = {
    "write" => PermFraction::Write(0),
    "write" "(" <k:UnsignedInt> ")" => PermFraction::Write(k),
    "read" "(" <k:UnsignedInt> ")" => PermFraction::Read(k),
}

MutReference: MutReference = {
    <start:@L> <name:MutName> <end:@R> => Spanned::spanned(start, end, MutReferenceX::Base(name)),
    <start:@L> "*" <t:AtomicTerm> <end:@R> => Spanned::spanned(start, end, MutReferenceX::Deref(t)),
    <start:@L> <m:MutReference> "[" <t:Term> "]" <end:@R> => Spanned::spanned(start, end, MutReferenceX::Index(m, t)),
    <start:@L> <m:MutReference> "[" <t1:Term?> ".." <t2:Term?> "]" <end:@R> => Spanned::spanned(start, end, MutReferenceX::Slice(m, t1, t2)),
}

PermissionReset = <Permission>;
Permission: Permission = {
    #[precedence(level = "0")]
    <start:@L> <v:PermVar> "(" <ts:CommaSep<Term>> ")" <end:@R> => Spanned::spanned(start, end, PermissionX::Var(v, ts)),
    <start:@L> "empty" <end:@R> => Spanned::spanned(start, end, PermissionX::Empty),
    <start:@L> <f:PermFraction> <r:MutReference> <end:@R> => Spanned::spanned(start, end, PermissionX::Fraction(f, r)),
    <start:@L> "if" <t:Term> "then" <p1:Permission> "else" <p2:Permission> "end" <end:@R> => Spanned::spanned(start, end, PermissionX::Ite(t, p1, p2)),
    "(" <p:PermissionReset> ")" => p,

    #[precedence(level = "1")]
    #[assoc(side="left")]
    <start:@L> <p1:Permission> "+" <p2:Permission> <end:@R> => Spanned::spanned(start, end, PermissionX::Add(p1, p2)),
}

TermReset = <Term>;
AtomicTerm: Term = {
    <start:@L> <v: Var> <end:@R> => Spanned::spanned(start, end, TermX::Var(v)), // Both variables and constants are parsed as variables first, and constants are then converted later
    <start:@L> <b: Bool> <end:@R> => Spanned::spanned(start, end, TermX::Bool(b)),
    <start:@L> <i:Int> <end:@R> => Spanned::spanned(start, end, TermX::Int(i)),
    "(" <t:TermReset> ")" => t,
}
Term: Term = {
    #[precedence(level = "0")]
    AtomicTerm,
    <start:@L> "&" <m:MutReference> <end:@R> => Spanned::spanned(start, end, TermX::Ref(m)),

    #[precedence(level = "1")]
    #[assoc(side="left")]
    <start:@L> <t1:Term> "*" <t2:Term> <end:@R> => Spanned::spanned(start, end, TermX::Mul(t1, t2)),

    #[precedence(level = "2")]
    #[assoc(side="left")]
    <start:@L> <t1:Term> "+" <t2:Term> <end:@R> => Spanned::spanned(start, end, TermX::Add(t1, t2)),

    #[precedence(level = "3")]
    #[assoc(side="left")]
    <start:@L> <t1:Term> "<" <t2:Term> <end:@R> => Spanned::spanned(start, end, TermX::Less(t1, t2)),
    #[assoc(side="left")]
    <start:@L> <t1:Term> "=" <t2:Term> <end:@R> => Spanned::spanned(start, end, TermX::Equal(t1, t2)),

    #[precedence(level = "4")]
    <start:@L> "not" <t:Term> <end:@R> => Spanned::spanned(start, end, TermX::Not(t)),
    
    #[precedence(level = "5")]
    #[assoc(side="left")]
    <start:@L> <t1:Term> "and" <t2:Term> <end:@R> => Spanned::spanned(start, end, TermX::And(t1, t2)),
}

ProcReset = <Proc>;
Proc: Proc = {
    #[precedence(level = "0")]
    <start:@L> "skip" <end:@R> => Spanned::spanned(start, end, ProcX::Skip),
    <start:@L> "send" <t:Term> "->" <c:ChanName> <end:@R> <k:Proc?> => Spanned::spanned(start, end, ProcX::Send(c, t, k.unwrap_or(Spanned::new(ProcX::Skip)))),
    <start:@L> "recv" <x:Var> "<-" <c:ChanName> <end:@R> <k:Proc?> => Spanned::spanned(start, end, ProcX::Recv(c, x, k.unwrap_or(Spanned::new(ProcX::Skip)))),
    <start:@L> "write" <t:Term> "->" <m:MutReference> <end:@R> <k:Proc?> => Spanned::spanned(start, end, ProcX::Write(m, t, k.unwrap_or(Spanned::new(ProcX::Skip)))),
    <start:@L> "read" <x:Var> "<-" <m:MutReference> <end:@R> <k:Proc?> => Spanned::spanned(start, end, ProcX::Read(m, x, k.unwrap_or(Spanned::new(ProcX::Skip)))),
    <start:@L> "debug" <k:Proc?> <end:@R> => Spanned::spanned(start, end, ProcX::Debug(k.unwrap_or(Spanned::new(ProcX::Skip)))),

    <start:@L> "if" <t:Term> "then" <k1:Proc> "else" <k2:Proc> "end" <end:@R> => Spanned::spanned(start, end, ProcX::Ite(t, k1, k2)),
    <start:@L> "if" <t:Term> "then" <k:Proc> "end" <end:@R> => Spanned::spanned(start, end, ProcX::Ite(t, k, Spanned::new(ProcX::Skip))),
    <start:@L> <p:ProcName> <args:Term*> <end:@R> => Spanned::spanned(start, end, ProcX::Call(p, args)),

    "(" <p:ProcReset> ")" => p,

    #[precedence(level = "1")]
    #[assoc(side="right")]
    <start:@L> <k1:Proc> "||" <k2:Proc> <end:@R> => Spanned::spanned(start, end, ProcX::Par(k1, k2)),
}

ProcResource: ProcResource = {
    <start:@L> <p:Permission> <end:@R> => Spanned::spanned(start, end, ProcResourceX::Perm(p)),
    <start:@L> "in" <n:ChanName> <end:@R> => Spanned::spanned(start, end, ProcResourceX::Input(n)),
    <start:@L> "out" <n:ChanName> <end:@R> => Spanned::spanned(start, end, ProcResourceX::Output(n)),
}

Decl: Decl = {
    <start:@L> "const" <n:Const> ":" <t:BaseTypeWithRef> <end:@R> => Decl::Const(Spanned::spanned(start, end, ConstDeclX { name: n, typ: t })),
    <start:@L> "perm" <v:PermVar> "(" <p:CommaSep<BaseType>> ")" <end:@R> => Decl::Perm(Spanned::spanned(start, end, PermDeclX { name: v, param_typs: p })),
    <start:@L> "mut" <n:MutName> ":" <t:MutType> <end:@R> => Decl::Mut(Spanned::spanned(start, end, MutDeclX { name: n, typ: t })),
    <start:@L> "chan" <n:ChanName> ":" <t:BaseTypeWithRef> "|" <p:Permission> <end:@R> =>
        Decl::Chan(Spanned::spanned(start, end, ChanDeclX { name: n, typ: t, perm: p })),
    <start:@L> "chan" <n:ChanName> ":" <t:BaseTypeWithRef> <end:@R> =>
        Decl::Chan(Spanned::spanned(start, end, ChanDeclX { name: n, typ: t, perm: Spanned::spanned(end, end, PermissionX::Empty) })),
    <start:@L> "proc" <n:ProcName> <p:CommaSep<ProcParam>> "|" <r:CommaSep<ProcResource>> <end:@R> "=" <b:Proc> =>
        Decl::Proc(Spanned::spanned(start, end, ProcDeclX { name: n, params: p, res: r, all_res: false, body: b })),
    <start:@L> "proc" <n:ProcName> <p:CommaSep<ProcParam>> <end:@R> "=" <b:Proc> =>
        Decl::Proc(Spanned::spanned(start, end, ProcDeclX { name: n, params: p, res: Vec::new(), all_res: false, body: b })),
    <start:@L> "proc" <n:ProcName> <p:CommaSep<ProcParam>> "|" "all" <end:@R> "=" <b:Proc> =>
        Decl::Proc(Spanned::spanned(start, end, ProcDeclX { name: n, params: p, res: Vec::new(), all_res: true, body: b })),
}

pub Program: Program = { Decl* => Program { decls: <> } }
