const param_len: bv32
mut param_A: array(bv32, bv32)
perm p0(bv32)
perm p1(bv32)
perm p2(bv32)
perm p3(bv32)
perm p4(bv32)
perm p5(bv32)
perm p6(bv32)
perm p7()
perm p8(bv32)
perm p9(bv32)
perm p10(bv32)
perm p11(bv32)
perm p12()
perm p13()
perm p14()
perm p15()
perm p16()
chan C0: bv32 | p0(C0)
chan C1: bv32 | p1(C1)
chan C2: bv32 | p2(C2)
chan C3: bv32 | p3(C3)
chan C4: bv32 | p4(C4)
chan C5: bv32 | p5(C5)
chan C6: bv32 | p6(C6)
chan C7: &param_A | p7()
chan C8: bv32 | p8(C8)
chan C9: bv32 | p9(C9)
chan C10: bv32 | p10(C10)
chan C11: bv32 | p11(C11)
proc CarryT0() | p12(), in C0, in C1, in C2, out C4, out C10 = recv a <- C1; send a -> C10; send a -> C4; CarryT0Loop()
proc CarryT0Loop() | p12(), in C0, in C1, in C2, out C4, out C10 = recv d <- C0; if not d = 0bv32 then recv b <- C2; send b -> C10; send b -> C4; CarryT0Loop() else CarryT0() end
proc SteerT1() | p13(), in C3, in C4, out C5, out C8, out C9 = recv d <- C3; recv v <- C4; if not d = 0bv32 then send v -> C9; send v -> C8; send v -> C5; SteerT1() else SteerT1() end
proc Add2() | p14(), in C5, in C6, out C2 = recv a <- C5; send a +bv 1bv32 -> C2; Add2()
proc St3() | p15(), in C7, in C8, in C9 = recv i <- C8; recv v <- C9; write v -> *(&param_A)[i]; St3()
proc Ult4() | p16(), in C10, in C11, out C0, out C3 = recv a <- C10; if a u< param_len then send 1bv32 -> C3; send 1bv32 -> C0; Ult4() else send 0bv32 -> C3; send 0bv32 -> C0; Ult4() end
proc Program() | all = (Ult4() || (St3() || (Add2() || (SteerT1() || (CarryT0() || send 0bv32 -> C1; skip)))))
