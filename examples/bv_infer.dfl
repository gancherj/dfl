mut A: [bv32]
mut B: array(bv8, bv32)

chan ld_index: int | write A[ld_index]

chan st_value: bv32
chan st_index: int | write A[st_index]

proc Inc(i: int) | write A[i..], out ld_index =
    send i -> ld_index
    Inc(i + 1)

proc Ld() | in ld_index, out st_value, out st_index =
    recv i <- ld_index
    read x <- A[i]
    send x +bv 1bv32 -> st_value
    send i -> st_index
    Ld()

proc St() | in st_value, in st_index =
    recv x <- st_value
    recv i <- st_index
    write x -> A[i]
    St()

perm P()
proc test() | P() =
    write 0bv32 -> B[1bv8]

proc Program() | all =
    Inc(0) || Ld() || St() || write 0bv32 -> B[1bv8]
