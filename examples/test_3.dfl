const param_size: bv32
mut param_weight: array(bv32, bv32)
mut param_src: array(bv32, bv32)
mut param_dest: array(bv32, bv32)
perm p0(bv32)
perm p1(bv32)
perm p2(bv32)
perm p3(bv32)
perm p4(bv32)
perm p5(bv32)
perm p6(bv32)
perm p7(bv32)
perm p8(bv32)
perm p9(bv32)
perm p10(bv32)
perm p11(bv32)
perm p12(bv32)
perm p13()
perm p14(bv32)
perm p15()
perm p16(bv32)
perm p17(bv32)
perm p18(bv32)
perm p19(bv32)
perm p20()
perm p21(bv32)
perm p22(bv32)
perm p23(bv32)
perm p24(bv32)
perm p25()
perm p26()
perm p27()
perm p28()
perm p29()
perm p30()
perm p31()
perm p32()
perm p33()
perm p34()
perm p35()
chan C0: bv32 | p0(C0)
chan C1: bv32 | p1(C1)
chan C2: bv32 | p2(C2)
chan C3: bv32 | p3(C3)
chan C4: bv32 | p4(C4)
chan C5: bv32 | p5(C5)
chan C6: bv32 | p6(C6)
chan C7: bv32 | p7(C7)
chan C8: bv32 | p8(C8)
chan C9: bv32 | p9(C9)
chan C10: bv32 | p10(C10)
chan C11: bv32 | p11(C11)
chan C12: bv32 | p12(C12)
chan C13: &param_src | p13()
chan C14: bv32 | p14(C14)
chan C15: &param_weight | p15()
chan C16: bv32 | p16(C16)
chan C17: bv32 | p17(C17)
chan C18: bv32 | p18(C18)
chan C19: bv32 | p19(C19)
chan C20: &param_dest | p20()
chan C21: bv32 | p21(C21)
chan C22: bv32 | p22(C22)
chan C23: bv32 | p23(C23)
chan C24: bv32 | p24(C24)
proc SGT0() | p25(), in C0, in C1, out C17 = recv a <- C0; recv b <- C1; if a s> b then send 1bv32 -> C17; SGT0() else send 0bv32 -> C17; SGT0() end
proc Add1() | p26(), in C2, in C3, out C22 = recv a <- C2; recv b <- C3; send a +bv b -> C22; Add1()
proc InvF2() | p27(), in C4, in C5, out C7 = recv a <- C5; send a -> C7; InvF2Loop(a)
proc InvF2Loop(a: bv32) | p27(), in C4, in C5, out C7 = recv d <- C4; if d = 0bv32 then send a -> C7; InvF2Loop(a) else InvF2() end
proc Eq3() | p28(), in C6, in C7, out C4, out C8, out C11 = recv a <- C6; recv b <- C7; if a = b then send 1bv32 -> C11; send 1bv32 -> C8; send 1bv32 -> C4; Eq3() else send 0bv32 -> C11; send 0bv32 -> C8; send 0bv32 -> C4; Eq3() end
proc CarryF4() | p29(), in C8, in C9, in C10, out C6, out C12 = recv a <- C9; send a -> C12; send a -> C6; CarryF4Loop()
proc CarryF4Loop() | p29(), in C8, in C9, in C10, out C6, out C12 = recv d <- C8; if d = 0bv32 then recv b <- C10; send b -> C12; send b -> C6; CarryF4Loop() else CarryF4() end
proc SteerF5() | p30(), in C11, in C12, out C14, out C16, out C21, out C23 = recv d <- C11; recv v <- C12; if d = 0bv32 then send v -> C23; send v -> C21; send v -> C16; send v -> C14; SteerF5() else SteerF5() end
proc Ld6() | p31(), in C13, in C14, out C3 = recv i <- C14; read v <- *(&param_src)[i]; send v -> C3; Ld6()
proc Ld7() | p32(), in C15, in C16, out C2 = recv i <- C16; read v <- *(&param_weight)[i]; send v -> C2; Ld7()
proc Select8() | p33(), in C17, in C18, in C19, out C5 = recv d <- C17; recv a <- C18; recv b <- C19; if not d = 0bv32 then send a -> C5; Select8() else send b -> C5; Select8() end
proc St9() | p34(), in C20, in C21, in C22 = recv i <- C21; recv v <- C22; write v -> *(&param_dest)[i]; St9()
proc Add10() | p35(), in C23, in C24, out C10 = recv a <- C23; send a +bv 1bv32 -> C10; Add10()
proc Program() | all = (Add10() || (St9() || (Select8() || (Ld7() || (Ld6() || (SteerF5() || (CarryF4() || (Eq3() || (InvF2() || (Add1() || (SGT0() || send 0bv32 -> C19; send param_size -> C18; send 0bv32 -> C9; send 0bv32 -> C1; send param_size -> C0; skip)))))))))))
